rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // States collection - TEMPORARY OPEN ACCESS FOR INITIAL SETUP
    match /states/{stateId} {
      // Anyone can read and write state data during setup
      allow read, write: if true;
      
      // Original rule (commented out during setup)
      // allow read: if true;
      // allow write: if isAdmin();
    }
    
    // State comments collection
    match /state_comments/{stateCode}/comments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      
      // Authenticated users can create comments
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid;
      
      // Users can update their own comments, admins can update any comment
      allow update: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || isAdmin());
      
      // Only the comment creator or an admin can delete a comment
      allow delete: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || isAdmin());
    }
    
    // Pending updates collection
    match /pending_updates/{updateId} {
      // Anyone can read pending updates
      allow read: if true;
      
      // Authenticated users can create pending updates
      allow create: if isAuthenticated();
      
      // Only the creator or an admin can update a pending update
      allow update: if isAuthenticated() && 
        (resource.data.contributor_id == request.auth.uid || isAdmin());
      
      // Only admins can delete pending updates
      allow delete: if isAdmin();
    }
    
    // State history collection
    match /state_history/{historyId} {
      // Anyone can read history
      allow read: if true;
      
      // Only admins can write to history
      allow write: if isAdmin();
    }
    
    // Users collection - TEMPORARY OPEN ACCESS FOR INITIAL SETUP
    match /users/{userId} {
      // Anyone can read and write user data during setup
      allow read, write: if true;
      
      // Original rules (commented out during setup)
      // allow read: if isAuthenticated() && 
      //   (request.auth.uid == userId || isAdmin());
      // allow create, update: if isAuthenticated() && 
      //   request.auth.uid == userId && 
      //   (!request.resource.data.keys().hasAny(['isAdmin']) || 
      //     (resource.data.isAdmin == request.resource.data.isAdmin));
      // allow delete: if isAdmin();
      // allow update: if isAdmin() && 
      //   request.resource.data.keys().hasAny(['isAdmin']);
    }
  }
}